@page "/PageWithAuth";
@inject HttpClient Http
@inject NavigationManager Nav
@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games
@using TriangleProject.Shared.Models.Users

<div class="background">
    <svg version="1.1" id="home-anim" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
         viewBox="0 0 1820 1080" style="enable-background:new 0 0 1820 1080;" xml:space="preserve">
<g id="home">
<defs>
<rect id="masque" y="0.4" width="1820" height="1080" />
  </defs>
<clipPath id="cache">
<use xlink:href="#masque" style="overflow:visible;" />
  </clipPath>
<g id="light-blue">
<line x1="630.8" y1="894.3" x2="476.3" y2="1048.8" />
<line x1="858.2" y1="823.9" x2="1012.7" y2="669.4" />
<line x1="1066.9" y1="458.2" x2="912.4" y2="612.7" />
<line x1="1294.3" y1="387.8" x2="1448.8" y2="233.3" />
<line x1="1503" y1="22.1" x2="1348.5" y2="176.6" />
<line x1="895.6" y1="1166.6" x2="1050.1" y2="1012.1" />
<line x1="1104.3" y1="800.9" x2="949.8" y2="955.4" />
<line x1="1331.7" y1="730.5" x2="1486.2" y2="576" />
<line x1="1540.4" y1="364.8" x2="1385.9" y2="519.3" />
<line x1="1767.8" y1="294.4" x2="1922.3" y2="139.9" />
<line x1="1976.5" y1="-71.3" x2="1822" y2="83.2" />
<line x1="1369.1" y1="1073.2" x2="1523.6" y2="918.7" />
<line x1="1577.8" y1="707.5" x2="1423.3" y2="862" />
<line x1="1805.2" y1="637.1" x2="1959.7" y2="482.6" />
<line x1="1624" y1="1041.4" x2="1469.4" y2="1195.9" />
<line x1="-134.7" y1="674.9" x2="19.8" y2="520.4" />
<line x1="74" y1="309.2" x2="-80.5" y2="463.7" />
<line x1="301.4" y1="238.8" x2="455.9" y2="84.3" />
<line x1="510.1" y1="-126.9" x2="355.6" y2="27.6" />
<line x1="-88.6" y1="1008.9" x2="65.9" y2="854.4" />
<line x1="120.1" y1="643.1" x2="-34.4" y2="797.7" />
<line x1="347.5" y1="572.8" x2="502" y2="418.3" />
<line x1="556.2" y1="207.1" x2="401.7" y2="361.6" />
<line x1="783.6" y1="136.7" x2="938.1" y2="-17.8" />
<line x1="157.6" y1="985.8" x2="3" y2="1140.3" />
<line x1="384.9" y1="915.5" x2="539.4" y2="760.9" />
<line x1="593.6" y1="549.7" x2="439.1" y2="704.3" />
<line x1="821" y1="479.4" x2="975.5" y2="324.9" />
<line x1="1029.7" y1="113.6" x2="875.2" y2="268.2" />
<line x1="1257.1" y1="43.3" x2="1411.6" y2="-111.2" />
  </g>
<g id="red">
<line x1="794.4" y1="883.4" x2="639.8" y2="1037.9" />
<line x1="694.6" y1="834.8" x2="849.2" y2="680.3" />
<line x1="1230.4" y1="447.3" x2="1075.9" y2="601.8" />
<line x1="1130.7" y1="398.7" x2="1285.2" y2="244.2" />
<line x1="1666.5" y1="11.2" x2="1512" y2="165.7" />
<line x1="732" y1="1177.5" x2="886.6" y2="1023" />
<line x1="1267.9" y1="790" x2="1113.3" y2="944.5" />
<line x1="1168.1" y1="741.4" x2="1322.7" y2="586.9" />
<line x1="1703.9" y1="353.9" x2="1549.4" y2="508.4" />
<line x1="1604.2" y1="305.3" x2="1758.7" y2="150.8" />
<line x1="1205.5" y1="1084.1" x2="1360.1" y2="929.6" />
<line x1="1741.4" y1="696.5" x2="1586.8" y2="851.1" />
<line x1="1641.6" y1="648" x2="1796.2" y2="493.5" />
<line x1="1787.5" y1="1030.5" x2="1633" y2="1185" />
<line x1="1687.8" y1="981.9" x2="1842.3" y2="827.4" />
<line x1="200.1" y1="-44.4" x2="45.6" y2="110.1" />
<line x1="237.5" y1="298.3" x2="83" y2="452.8" />
<line x1="137.8" y1="249.7" x2="292.3" y2="95.2" />
<line x1="673.6" y1="-137.8" x2="519.1" y2="16.7" />
<line x1="283.7" y1="632.2" x2="129.2" y2="786.8" />
<line x1="184" y1="583.7" x2="338.5" y2="429.2" />
<line x1="719.8" y1="196.2" x2="565.2" y2="350.7" />
<line x1="620" y1="147.6" x2="774.6" y2="-6.9" />
<line x1="321.1" y1="974.9" x2="166.6" y2="1129.4" />
<line x1="221.4" y1="926.4" x2="375.9" y2="771.8" />
<line x1="757.2" y1="538.8" x2="602.7" y2="693.4" />
<line x1="657.5" y1="490.3" x2="812" y2="335.8" />
<line x1="1193.3" y1="102.7" x2="1038.7" y2="257.3" />
<line x1="1093.5" y1="54.2" x2="1248.1" y2="-100.3" />
  </g>
<g id="blue">
<line x1="225.8" y1="1151" x2="534.9" y2="841.9" />
<line x1="827.1" y1="1003.3" x2="518" y2="1312.3" />
<line x1="661.9" y1="714.9" x2="971" y2="405.9" />
<line x1="1263.1" y1="567.2" x2="954.1" y2="876.3" />
<line x1="1098" y1="278.8" x2="1407.1" y2="-30.2" />
<line x1="1699.2" y1="131.1" x2="1390.2" y2="440.2" />
<line x1="699.3" y1="1057.6" x2="1008.4" y2="748.5" />
<line x1="1300.6" y1="909.9" x2="991.5" y2="1218.9" />
<line x1="1135.4" y1="621.5" x2="1444.5" y2="312.4" />
<line x1="1736.6" y1="473.8" x2="1427.6" y2="782.8" />
<line x1="1571.5" y1="185.4" x2="1880.6" y2="-123.6" />
<line x1="1172.8" y1="964.2" x2="1481.9" y2="655.1" />
<line x1="1774.1" y1="816.5" x2="1465" y2="1125.5" />
<line x1="1608.9" y1="528.1" x2="1918" y2="219" />
<line x1="1219" y1="1298.1" x2="1528" y2="989.1" />
<line x1="1655.1" y1="862" x2="1964.1" y2="553" />
<line x1="232.8" y1="75.5" x2="-76.2" y2="384.6" />
<line x1="270.2" y1="418.2" x2="-38.8" y2="727.3" />
<line x1="105.1" y1="129.8" x2="414.2" y2="-179.2" />
<line x1="706.3" y1="-17.9" x2="397.3" y2="291.2" />
<line x1="-284.8" y1="899.9" x2="24.2" y2="590.8" />
<line x1="316.4" y1="752.2" x2="7.3" y2="1061.2" />
<line x1="151.3" y1="463.8" x2="460.3" y2="154.7" />
<line x1="752.5" y1="316.1" x2="443.4" y2="625.1" />
<line x1="587.3" y1="27.7" x2="896.4" y2="-281.4" />
<line x1="1188.6" y1="-120" x2="879.5" y2="189" />
<line x1="-247.4" y1="1242.5" x2="61.6" y2="933.5" />
<line x1="188.7" y1="806.4" x2="497.7" y2="497.4" />
<line x1="789.9" y1="658.8" x2="480.8" y2="967.8" />
<line x1="624.8" y1="370.4" x2="933.8" y2="61.3" />
<line x1="1226" y1="222.7" x2="916.9" y2="531.7" />
<line x1="1662.1" y1="-213.4" x2="1353" y2="95.6" />
  </g>
</g>
</svg>

</div>

@if (user != null)
{
    @if (user != null)
    {
        <div style="display: flex; align-items: center; gap: 16px; direction: rtl;">
            <button id="newGameButton" class="btn btn-primary @buttonClass" @onclick="ToggleTable">
                <span id="newGameButtonText" style="margin-left: 8px; white-space: nowrap;">@Localizer["New Game"]</span>
                <span><i class="fa fa-plus-square" style="font-size: 42px;"></i></span>
            </button>
            @if (showTable)
            {
                <div class="newGameDIV">
                    <EditForm Model="gameToAdd" OnValidSubmit="formSubmit" OnInvalidSubmit="failedSubmit">
                        <DataAnnotationsValidator  />

                        <table class="rounded-table newGame" style="width:600px; height: 88px;">

                            <tr style="border-bottom: 1px solid white;">
                                <td colspan="3">
                                    <div class="addGameTitle">
                                        שם המשחק
                                        <span>
                                            (2-30 תווים)
                                            @if (showValidationMessage)
                                            {
                                                <ValidationMessage For="@(() => gameToAdd.GameName)" style="color:Red;margin-right:170px;" />
                                            }
                                        </span>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div class="customInputContainer">
                                        <CustomInputText Value="@gameToAdd.GameName"
                                                         ValueChanged="@((string value) => gameToAdd.GameName = value)"
                                                         ValueExpression="() => gameToAdd.GameName"
                                                         alert=""
                                                         class="default-input"
                                                         maxlength="30"
                                                         maxChars="30"
                                                         minChars="2"
                                                         style="width:330px;" />
                                    </div>
                                </td>
                                <td style="width:13%;">
                                    <button type="submit" class="btn btn-primary" value="שמירה"> שמירה </button>
                                </td>
                                <td style="width:13%;">
                                    <button type="button" class="btn btn-secondary" value="ביטול" @onclick="ToggleTable"> ביטול </button>

                                </td>
                            </tr>
                        </table>
                    </EditForm>


                </div>
            }
        </div>
        <br />
        <div class="topDiv">
            <div class="innerDiv">
                <h3>המשחקים שלי</h3>
                <h5>הנחיות לפרסום:</h5>
                <ul>
                    <li>גזע שאלה - 2 תווים לפחות</li>
                    <li>יחס מסיחים - 2:1</li>
                    <li>לפחות 18 מסיחים</li>
                    <li>הודעת סיום</li>
                </ul>
            </div>
        </div>

        <div class="bottomDiv">
            <img class="bottomDivImage" src="assets-images/DogPixel.png">
        </div>

        <div class="table-container @grayedclass">
            <table class="rounded-table">
                <thead>
                    <tr style="background-color:whitesmoke;">
                        <th>@Localizer["GameCode"]</th>
                        <th class="tableGameName">@Localizer["GameName"]</th>
                        <th>
                            @Localizer["GameEdit"]
                            <Tooltip Text="לחצו על העפרון לעריכת המשחק ומסיחי התשובות"><i class="fa fa-info-circle"> </i> </Tooltip>
                        </th>
                        <th style="text-align: right;">
                            @Localizer["IsPublished"]
                            <Tooltip Text="פרסום המשחק דורש: <br/><br/>
                                                      <ul>
                                                        <li> גזע שאלה - 2 תווים לפחות</li>
                                                        <li> יחס מסיחים - 2:1</li>
                                                        <li> לפחות 18 מסיחים</li>
                                                        <li> הודעת סיום</li></ul>"><i class="fa fa-info-circle"> </i></Tooltip>
                        </th>
                        <th>
                            @Localizer["GameDelete"]
                            <Tooltip Text="מחיקת המשחק לצמיתות ללא אפשרות שחזור"><i class="fa fa-info-circle"></i></Tooltip>
                        </th>
                    </tr>
                </thead>
                <tbody class="roundedTbody">
                    @if (GamesList != null && GamesList.Count > 0)
                    {
                        @foreach (var game in GamesList)
                        {
                            <tr style="border-top: 1px solid #e0e0e0;">
                                <td><b>@game.GameCode</b></td>
                                <td>@game.GameName</td>
                                <td><i class="fa fa-pencil icon" style="font-size:24px;" @onclick="()=>EditGame(game)"></i> </td>
                                <td>
                                    @if (game.CanPublish == false)
                                    {
                                        <div class="checkbox-wrapper-19">
                                            <input type="checkbox" id="@game.ID" disabled>
                                            <label for="@game.ID" class="check-box1" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="checkbox-wrapper-20">
                                            <input type="checkbox" id="@game.ID" checked="@game.IsPublished" @onchange="()=>changePublish(game)" />
                                            <label for="@game.ID" class="check-box2"></label>
                                        </div>
                                    }
                                </td>
                                <td>
                                    <i class="fa fa-trash-o icon" style="font-size:24px;" @onclick="()=>DeleteGame(game)"></i>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center" style="font-weight:bold;height:350px;">בטבלה זו יופיעו כלל המשחקים, טרם הוזנו משחקים - לחצו על "צור משחק"</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>



    }
}

@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@code {
    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public List<Games> GamesList { get; set; }

    [Parameter]
    public EventCallback<Games> OnDeleteClicked { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    bool showTable = false;
    UserWithGames user;
    Games Games;
    GameToAdd gameToAdd = new GameToAdd();
    string msg = "";
    string errormsg = "";
    string buttonClass = ""; // Initially, no additional class
    bool showValidationMessage = false;
    string grayedclass = "";

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/game/" + UserId);
        string error = userRes.Content.ReadAsStringAsync().Result;

        if (userRes.IsSuccessStatusCode == true)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>().Result;
        }

        var gameRes = await Http.GetAsync("api/game/" + UserId + "/all");

        if (gameRes.IsSuccessStatusCode == true)
        {
            GamesList = gameRes.Content.ReadFromJsonAsync<List<Games>>().Result;
            if (GamesList != null)
            {
                Console.WriteLine("GameList is Full");
            }
            else
            {
                Console.WriteLine("GamesList is null");
            }
        }
        else
        {
            error = userRes.Content.ReadAsStringAsync().Result;
        }
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./PagWithAuth", true);
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
            case "Game not created":
                msg = "the game is not created, please try again later";
                break;
            case "Game code not created":
                msg = "Game code is not created";
                break;
        }
    }

    //New game creation
    async Task CreateGame()
    {
        //שליחת המשחק החדש לקונטרולר
        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/addGame/", gameToAdd);
        if (userRes.IsSuccessStatusCode == true)
        {
            //החזרת המשחק והוספתו לרשימת המשחקים כדי שיתווסף לטבלה
            Games newGame = userRes.Content.ReadFromJsonAsync<Games>().Result;
            user.Games.Add(newGame);
            gameToAdd.GameName = "";
            //call to edit game with the new gamecode created

            Nav.NavigateTo("./EditGame/" + newGame.GameCode);
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            ShowError(error);
        }

    }

    //deletegame method considering my controller code
    private async Task DeleteGame(Games game)
    {
        List<string> filesToDeleteList = new List<string>();

        //call GetImageFilesForDeletion and create a new list of images to delete 
        var filesToDelete = await Http.GetAsync("api/game/" + UserId + "/GetImageFilesForDeletion/" + game.GameCode);

        if (filesToDelete.IsSuccessStatusCode)
        {
            filesToDeleteList = await filesToDelete.Content.ReadFromJsonAsync<List<string>>();
        }
        else
        {
            Console.WriteLine("Nothing To Delete");
        }


        var parameters = new ModalParameters().Add(nameof(PopUpComponent.Message), "האם ברצונכם למחוק את המשחק?"); // Pass parameter(s) to modal component
        var messageForm = Modal.Show<PopUpComponent>("מחיקת משחק", parameters); // Show modal
        var result = await messageForm.Result; // Get result from modal

        if (result.Confirmed)
        {
            if(filesToDeleteList.Count > 0)
            {
                //delete image files
                var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", filesToDeleteList);
                if (saveResponse.IsSuccessStatusCode == true)
                {
                    Console.WriteLine("Images deleted Successfully");
                }
                else
                {
                    msg = "IMAGES DELETE ERROR";
                }
            }

            //שליחת המשתנה לקונטרולר
            var res = await Http.DeleteAsync("api/game/" + UserId + "/deleteGame/" + game.GameCode);
            if (res.IsSuccessStatusCode == true)
            {
                //הסרת המשחק מרשימת המשחקים
                GamesList.Remove(game);
            }
            else
            {
                string error = res.Content.ReadAsStringAsync().Result;
                switch (error)
                {
                    case "No Session":
                        msg = "Session error, please reload page";
                        break;
                    case "User Not Logged In":
                        msg = "You are not logged in, please reload page to try again";
                        break;
                    case "User Not Found":
                        msg = "the user details not found, please reload page to try again";
                        break;
                }
            }

        }
        else
        {
            Console.WriteLine("Not confirmed");
        }
        var currentUrl = Nav.Uri;
        // Navigate to the current URL to reload the page
        Nav.NavigateTo(currentUrl);
    }

    //edit game method to navigate to edit game page
    private void EditGame(Games game)
    {
        Nav.NavigateTo("./EditGame/" + game.GameCode);
    }

    //edit publish status method to change IsPublished value on the server db
    protected async Task changePublish(Games game)
    {
        PublishGame gameToSend = new PublishGame();
        gameToSend.ID = game.ID;
        gameToSend.IsPublished = !game.IsPublished;

        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/publishGame", gameToSend);

        if (userRes.IsSuccessStatusCode == true)
        {
            int index = GamesList.FindIndex(x => x.ID == game.ID);
            user.Games[index].IsPublished = !game.IsPublished;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
                case "Game not created":
                    msg = "There was a problem creating the game";
                    break;
                case "Game code not created":
                    msg = "There was a problem generating the game code";
                    break;
                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user";
                    break;
                case "This game cannot be published":
                    msg = "The game does not meet the conditions of publishing";
                    break;
            }
        }
    }

    private void ToggleTable()
    {
        showTable = !showTable;
        buttonClass = showTable ? "newGameButtonOut" : ""; // Toggle the widerButton class based on showTable
        gameToAdd.GameName = string.Empty;
        errormsg = string.Empty;
        grayedclass = showTable ? "grayed-table-container" : "";
    }

    void formSubmit()
    {
        CreateGame();
    }

    void failedSubmit()
    {
        showValidationMessage = true;
    }
}