@page "/PageWithAuth";
@inject HttpClient Http
@using TriangleProject.Shared.Models.Users
@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games
@inject NavigationManager Nav

<style>
    /* Reset default table styles */
    table {
        border-collapse: separate; /* Change to separate */
        border-spacing: 0; /* Remove border spacing */
        width: 100%;
    }

    /* Apply rounded corners */
    .rounded-table {
        border-radius: 8px;
        overflow: hidden;
    }

        /* Style table headers */
        .rounded-table th {
            background-color: #f2f2f2;
            padding: 10px;
            text-align: left;
        }

            /* Align header content in specific columns */
            .rounded-table th:nth-child(1),
            .rounded-table th:nth-child(3),
            .rounded-table th:nth-child(4),
            .rounded-table th:nth-child(5) {
                text-align: center;
            }

            .rounded-table th:nth-child(2) {
                text-align: right;
            }

        /* Style table cells */
        .rounded-table td {
            padding: 10px;
            border-top: 1px solid #e0e0e0; /* Add a small top border for separation */
        }

            /* Align content in specific columns */
            .rounded-table td:nth-child(1),
            .rounded-table td:nth-child(3),
            .rounded-table td:nth-child(4),
            .rounded-table td:nth-child(5) {
                text-align: center;
            }

            .rounded-table td:nth-child(2) {
                text-align: right;
            }

    /* Add outer border to the table */
    .rounded-table {
        border: 2px solid #ccc;
    }

    /* Change color on hover for the icons */
    .icon {
        font-size: 24px;
        transition: color 0.2s; /* Add a smooth color transition */
    }

        .icon:hover {
            color: darkorange; /* Change the color on hover */
        }



    .custom-tooltip {
        /*position: relative;*/
        display: inline-block;
        cursor: pointer; /* Set cursor to indicate a tooltip */
        top: 50px;
    }

        .custom-tooltip:hover .tooltip-content {
            display: block;
        }



    .tooltip-content {
        display: none;
        position: absolute;
        transform: translateX(-50%);
        background-color: #333;
        color: #fff;
        padding: 4px;
        border-radius: 4px;
        white-space: nowrap;
    }



</style>

@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@*
@if (user != null)
{
    <div style="direction:ltr;" class="px-8 d-flex  align-items-center">
        <ul>
            <li>The user ID is: @UserId</li>
            <li>The Games of: @user.FirstName</li>
        </ul>
    </div>
<br />*@
@*    <ul>
        @foreach (string game in user.Games)
        {
            <li>@game</li>
        }
    </ul>
}*@
@if (user!=null)
{
    @if (user != null)
    {
        <p>Add New Game</p>
        <input type="text" @bind="gameToAdd.GameName" />
        <button style="direction: rtl; display: flex; align-items: center; justify-content: center; border-radius: 8px; height: 90px;" class="btn btn-primary" @onclick="CreateGame">
            <span style="margin-left: 8px; white-space: nowrap;">@Localizer["New Game"]</span>
            <span><i class="fa fa-plus-square" style="font-size: 42px;"></i></span>
        </button>


        <br />

        <table class="rounded-table">
            <thead >
                <tr style="background-color:whitesmoke;">

                    <th>
                        
                       @Localizer["GameCode"]
                        
                    </th>
                    <th>@Localizer["GameName"]</th>
                    <th>
                        @Localizer["GameEdit"]
                        <div class="custom-tooltip ">
                            <i class="fa fa-info-circle"></i>
                            <div class="tooltip-content">
                                איזה טולטיפ חביב ונחמד
                                <br />
                                וואלק וואלק

                            </div>
                        </div>
                    </th>
                    <th>@Localizer["IsPublished"]
                        <div class="custom-tooltip ">
                            <i class="fa fa-info-circle"></i>
                            <div class="tooltip-content">
                                איזה טולטיפ חביב ונחמד
                                <br />
                                וואלק וואלק
                            </div>
                        </div>
                    </th>
                    <th>@Localizer["GameDelete"]
                        <div class="custom-tooltip ">
                            <i class="fa fa-info-circle"></i>
                            <div class="tooltip-content">
                                איזה טולטיפ חביב ונחמד
                                <br />
                                וואלק וואלק

                            </div>
                        </div>
                    </th>
                </tr>
            </thead>
          <tbody>
                @foreach (var item in GamesList)
                {
                    <tr>
                        <td>
                            <b> @item.GameCode</b>
                        </td>
                        <td >
                            @item.GameName
                        </td>
                        <td>
                            <i class="fa fa-pencil icon" style="font-size:24px;" @onclick="()=>EditGame(item)" ></i>
                        </td>
                        <td>
                            @if (item.IsPublished == true)
                            {
                                <i class="fa fa-check-square-o icon" style="font-size:24px;" @onclick="()=>EditGame(item)"></i>
                            }
                            else if (item.IsPublished == false)
                            {
                                <i class="fa fa-square-o icon" style="font-size:24px;" @onclick="()=>EditGame(item)"></i>

                            }
                        </td>
                        <td>
                            <i class="fa fa-trash-o icon" style="font-size:24px;" @onclick="()=>DeleteGame(item)"></i>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
}




@code {
    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public List<GameMainTable> GamesList { get; set; }

    [Parameter]
    public EventCallback<GameMainTable> OnDeleteClicked { get; set; }

    UserWithGames user;
    GameMainTable Games;

    GameToAdd gameToAdd = new GameToAdd();

    string msg = "";    

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/game/" + UserId);
        string error = userRes.Content.ReadAsStringAsync().Result;


        if (userRes.IsSuccessStatusCode == true)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>().Result;
        }
        var gameRes = await Http.GetAsync("api/game/" + UserId + "/all");
        Console.WriteLine(gameRes.ToString());

        if (gameRes.IsSuccessStatusCode == true)
        {
            GamesList = gameRes.Content.ReadFromJsonAsync<List<GameMainTable>>().Result;
            Console.WriteLine("Yo2");

            if (GamesList != null)
            {
                Console.WriteLine("GameList is Full");
            }
            else
            {
                Console.WriteLine("GamesList is null");
            }
        }
        else
        {
            error = userRes.Content.ReadAsStringAsync().Result;
        }
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    //New game creation 
    async Task CreateGame()
    {
        //שליחת המשחק החדש לקונטרולר
        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/addGame/", gameToAdd);
        if (userRes.IsSuccessStatusCode == true)
        {
            //החזרת המשחק והוספתו לרשימת המשחקים כדי שיתווסף לטבלה
            GameForCreation newGame = userRes.Content.ReadFromJsonAsync<GameForCreation>().Result;
            user.Games.Add(newGame.GameName);
            gameToAdd.GameName = "";
        }
        else
        {
            //המשך הקוד כאן
        }
    }

    //delete game method to delete game from the server db
    private async Task DeleteGame(GameMainTable game)
    {
        await OnDeleteClicked.InvokeAsync(game);
        var res = await Http.DeleteAsync("api/game/" + game.GameCode);
        if (res.IsSuccessStatusCode == true)
        {
            GamesList.Remove(game);
        }
        else
        {
            string error = res.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
            }
        }


    }
    
    //edit game method to navigate to edit game page
    private async Task EditGame(GameMainTable game)
    {
        Nav.NavigateTo("./EditGame/" + game.GameCode, true);
    }
    
    //edit publish status method to change IsPublished value on the server db
    private async Task ChangePublishStatus(GameMainTable game)
    {
        //check if published, if so, unpublish, if not, publish
        if (game.IsPublished == true)
                {
                    game.IsPublished = false;
                }
                else
                {
                    game.IsPublished = true;
                }
        
                
        var res = await Http.PutAsJsonAsync("api/game/" + game.GameCode, game);
        if (res.IsSuccessStatusCode == true)
        {
            GamesList.Remove(game);
        }
        else
        {
            string error = res.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
            }
        }
    }
}