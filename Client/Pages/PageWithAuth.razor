@page "/PageWithAuth";
@inject HttpClient Http
@inject NavigationManager Nav
@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games
@using TriangleProject.Shared.Models.Users



@if (user != null)
{
    @if (user != null)
    {
        <div style="display: flex; align-items: center; gap: 16px; direction: rtl;">
            <button style="direction: rtl; display: flex; align-items: center; justify-content: center; border-radius: 8px; height: 88px;" class="btn btn-primary" @onclick="CreateGame">
                <span style="margin-left: 8px; white-space: nowrap;">@Localizer["New Game"]</span>
                <span><i class="fa fa-plus-square" style="font-size: 42px;"></i></span>
            </button>
            <div style="flex: 1; max-height: 91px; overflow: auto;">
                <table class="rounded-table" style="width: 500px; height: 88px;">
                    <tr>
                        <td>
                            <input type="text" @bind="gameToAdd.GameName" placeholder="שם המשחק החדש" style="height: 40px; padding: 8px; border-radius: 4px; border: 1px solid #ccc; width: 100%;" />
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <br />
        <div class="=table-container">
            <table class="rounded-table">
                <thead>
                    <tr style="background-color:whitesmoke;">
                        <th>
                            @Localizer["GameCode"]
                        </th>
                        <th class="tableGameName">@Localizer["GameName"]</th>
                        <th>
                            @Localizer["GameEdit"]
                            <Tooltip Text="לחצו על העפרון לעריכת המשחק ומסיחי התשובות">
                                <i class="fa fa-info-circle">
                                </i>
                            </Tooltip>
                        </th>
                        <th>
                            @Localizer["IsPublished"]
                            <div class="custom-tooltip">
                                <Tooltip Text="פרסום דורש לפחות 10 שאלות">
                                    <i class="fa fa-info-circle">
                                    </i>
                                </Tooltip>

                            </div>
                        </th>
                        <th>
                            @Localizer["GameDelete"]
                            <div class="custom-tooltip ">
                                <Tooltip Text="מחיקת המשחק לצמיתות ללא אפשרות שחזור">
                                    <i class="fa fa-info-circle"></i>
                                </Tooltip>

                            </div>
                        </th>
                    </tr>
                </thead>


                <tbody>
                    @foreach (var game in GamesList)
                    {
                        <tr>
                            <td>
                                <b>@game.GameCode</b>
                            </td>
                            <td>
                                @game.GameName
                            </td>
                            <td>
                                <i class="fa fa-pencil icon" style="font-size:24px;" @onclick="()=>EditGame(game)"></i>
                            </td>
                            <td>

                                @if (game.CanPublish == false)
                                {
                                    <div class="checkbox-wrapper-19">
                                        <input type="checkbox" id="@game.ID" disabled>
                                        <label for="@game.ID" class="check-box1" />
                                    </div>
                                }

                                else
                                {
                                    <div class="checkbox-wrapper-20">
                                        <input type="checkbox" id="@game.ID" checked="@game.IsPublished" @onchange="()=>changePublish(game)" />
                                        <label for="@game.ID" class="check-box2"></label>
                                    </div>
                                }
                            </td>

                            <td>
                                <i class="fa fa-trash-o icon" style="font-size:24px;" @onclick="()=>DeleteGame(game)"></i>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    }
}

@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@code {
    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public List<Games> GamesList { get; set; }

    [Parameter]
    public EventCallback<Games> OnDeleteClicked { get; set; }

    UserWithGames user;

    Games Games;

    GameToAdd gameToAdd = new GameToAdd();

    string msg = "";

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/game/" + UserId);
        string error = userRes.Content.ReadAsStringAsync().Result;

        if (userRes.IsSuccessStatusCode == true)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>().Result;
        }

        var gameRes = await Http.GetAsync("api/game/" + UserId + "/all");

        if (gameRes.IsSuccessStatusCode == true)
        {
            GamesList = gameRes.Content.ReadFromJsonAsync<List<Games>>().Result;
            if (GamesList != null)
            {
                Console.WriteLine("GameList is Full");
            }
            else
            {
                Console.WriteLine("GamesList is null");
            }
        }
        else
        {
            error = userRes.Content.ReadAsStringAsync().Result;
        }
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./PagWithAuth", true);
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
            case "Game not created":
                msg = "the game is not created, please try again later";
                break;
            case "Game code not created":
                msg = "Game code is not created";
                break;
        }
    }

    //New game creation
    async Task CreateGame()
    {
        //שליחת המשחק החדש לקונטרולר
        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/addGame/", gameToAdd);
        if (userRes.IsSuccessStatusCode == true)
        {
            //החזרת המשחק והוספתו לרשימת המשחקים כדי שיתווסף לטבלה
            Games newGame = userRes.Content.ReadFromJsonAsync<Games>().Result;
            user.Games.Add(newGame);
            gameToAdd.GameName = "";
            //call to edit game with the new gamecode created

            Nav.NavigateTo("./EditGame/" + newGame.GameCode);
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            ShowError(error);
        }

    }

    //deletegame method considering my controller code
    private async Task DeleteGame(Games game)
    {
        //שליחת המשתנה לקונטרולר
        var res = await Http.DeleteAsync("api/game/" + UserId + "/deleteGame/" + game.GameCode);
        if (res.IsSuccessStatusCode == true)
        {
            //הסרת המשחק מרשימת המשחקים
            GamesList.Remove(game);
        }
        else
        {
            string error = res.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
            }
        }
    }

    //edit game method to navigate to edit game page
    private void EditGame(Games game)
    {
        Nav.NavigateTo("./EditGame/" + game.GameCode);
    }

    //edit publish status method to change IsPublished value on the server db
    protected async Task changePublish(Games game)
    {
        PublishGame gameToSend = new PublishGame();
        gameToSend.ID = game.ID;
        gameToSend.IsPublished = !game.IsPublished;

        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/publishGame", gameToSend);

        if (userRes.IsSuccessStatusCode == true)
        {
            int index = GamesList.FindIndex(x => x.ID == game.ID);
            user.Games[index].IsPublished = !game.IsPublished;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
                case "Game not created":
                    msg = "There was a problem creating the game";
                    break;
                case "Game code not created":
                    msg = "There was a problem generating the game code";
                    break;
                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user";
                    break;
                case "This game cannot be published":
                    msg = "The game does not meet the conditions of publishing";
                    break;
            }
        }
    }
}