@page "/PageWithAuth";
@inject HttpClient Http
@using TriangleProject.Shared.Models.Users
@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games

@inject NavigationManager Nav

@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

<h3>The user ID is: @UserId</h3>

@if (user != null)
{
    <p>The Games of: @user.FirstName</p>
    <ul>
        @foreach (string game in user.Games)
        {
            <li>@game</li>
        }
    </ul>
}

@if (user!=null)
{
    @if (user != null)
    {
        <table class="table">
            <thead>
                <tr>
                    @foreach (var property in typeof(GameMainTable).GetProperties())
                    {
                        <th>@Localizer[property.Name]</th>
                    }

                </tr>
            </thead>
          <tbody>
                @foreach (var item in GamesList)
                {
                    <tr>
                        <td>
                            @item.GameCode
                        </td>
                        <td>
                            @item.GameName
                        </td>
                        <td>
                            <input type="checkbox"  @bind="item.IsPublished">
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}




@code {
    [CascadingParameter]
    public int UserId { get; set; }
    UserWithGames user;

    GameMainTable Games;
    [Parameter]
    public List<GameMainTable> GamesList { get; set; }


    string msg = "";    
    [Parameter]
    public EventCallback<GameMainTable> OnDeleteClicked { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/game/" + UserId);
        string error = userRes.Content.ReadAsStringAsync().Result;


        if (userRes.IsSuccessStatusCode == true)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>().Result;
        }
        var gameRes = await Http.GetAsync("api/game/" + UserId + "/all");
        Console.WriteLine(gameRes.ToString());

        if (gameRes.IsSuccessStatusCode == true)
        {
            GamesList = gameRes.Content.ReadFromJsonAsync<List<GameMainTable>>().Result;
            Console.WriteLine("Yo2");

            if (GamesList != null)
            {
                Console.WriteLine("GameList is Full");

            }
            else
            {
                Console.WriteLine("GamesList is null");
            }

        }


        else
        {
            error = userRes.Content.ReadAsStringAsync().Result;
        }
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    
    private async Task DeleteGame(GameMainTable game)
    {
        await OnDeleteClicked.InvokeAsync(game);
    }
    private async Task EditGame(GameMainTable game)
    {
        await OnDeleteClicked.InvokeAsync(game);
    }



}