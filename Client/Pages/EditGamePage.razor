@page "/EditGame/{gameCode}";
@inject HttpClient Http
@inject NavigationManager Nav
@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games

<p>@Localizer["GameEdit"] - GameID: @gameCode</p>


@if (gameData != null)
{
    <table>
        <tr>
            <td>
                <label>@Localizer["GameName"]</label>
            </td>
            <td>
                <input type="text" @bind-value=newGameName />
            </td>
        </tr>
        <tr>
            <td>
                <label>@Localizer["GameQuestion"]</label>
            </td>
            <td>
                <input type="text" @bind-value=newGameQuestion />
            </td>
        </tr>
        <tr>
            <td>
                <label>@Localizer["GameEndMessage"]</label>
            </td>
            <td>
                <input type="text" @bind-value=newGameEndMessage />
            </td>
        </tr>
        <tr>
            <td>
                <button class="btn btn-primary" @onclick="EditGameData">@Localizer["Save"]</button>
            </td>
            <td>
                <button class="btn btn-secondary" @onclick="CancelEdit">@Localizer["Cancel"]</button>
            </td>
        </tr>

    </table>
}


@code {
        [CascadingParameter]
        public int UserId { get; set; }

        [Parameter]
        public string gameCode { get; set; }

        GameDetails gameData;

        string newGameName = "";
        string newGameQuestion = "";
        string newGameEndMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await GetGameData();
    }

    //get game data from database by gamecode
    async Task GetGameData()
    {
        gameData = await Http.GetFromJsonAsync<GameDetails>($"api/game/" + UserId + "/getGame/" + gameCode);
        newGameName = gameData.GameName;
        newGameQuestion = gameData.QuestionDescription;
        newGameEndMessage = gameData.GameEndMessage;

    }

    //edit game data save to database using  [HttpPut("updateGame/{updateGameCode}")] and textbox values on page
    async Task EditGameData()
    {
        var game = new GameToUpdate
        {
            //set gamename the value of the gamename input on page
            ID = gameData.ID,
            GameCode = gameCode,
            GameName = newGameName,
            QuestionDescription = newGameQuestion
        };

        Console.WriteLine(game.QuestionDescription);
        await Http.PutAsJsonAsync($"api/game/" + UserId + "/updateGame/" + gameCode, game);
        Nav.NavigateTo("/Pagewithauth");
    }

    //cancel edit and return to page with auth
    void CancelEdit()
    {
        Nav.NavigateTo("/Pagewithauth");
    }
}
