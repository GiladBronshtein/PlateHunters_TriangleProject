@page "/EditGame/{gameCode}";
@inject HttpClient Http
@inject NavigationManager Nav
@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games
@using TriangleProject.Shared.Models.GamesContent;
@using TriangleProject.Shared.Models.Users


@if (gameData != null)
{
    <EditForm Model="gameData" OnValidSubmit="formSubmit" OnInvalidSubmit="failedSubmit">
        <table>
            <tr>
                <th colspan="5">
                    @Localizer["GameSettings"] -
                    <label>@Localizer["GameEdit"] - GameID: @gameData.GameCode</label>
                </th>
            </tr>
            <tr>
                <td style="width:12%;">
                    <i class="fa fa-check-circle icon" style="font-size:24px;"></i>
                    <label>@Localizer["GameName"]</label>
                </td>
                <td style="width:30%;">
                    <InputText @bind-Value="gameData.GameName" style="width:300px;" />
                </td>
                <td rowspan="3" style="text-align:center;">
                    PIC OR TEXT
                </td>
                <td>
                    הפעלת תצוגה מקדימה
                </td>
            </tr>
            <tr>
                <td style="width:12%;">
                    <i class="fa fa-check-circle icon" style="font-size:24px;"></i>
                    <label>@Localizer["GameQuestion"]</label>
                </td>
                <td style="width:30%;">
                    <InputText @bind-Value="gameData.QuestionDescription" style="width:300px;" />
                </td>
                <td>שלט עם כיתוב ותמונה</td>

            </tr>
        </table>
        <table>
            <tr>
                <td>
                    <label>@Localizer["GameCorrectCategory"]</label>
                    <InputText @bind-Value="gameData.QuestionCorrectCategory" style="width:300px;" />
                    <div class="custom-tooltip ">
                        <i class="fa fa-info-circle"></i>
                        <div class="tooltip-content">
                            איזה טולטיפ חביב ונחמד
                        </div>
                    </div>
                </td>
                <td>
                    <label>@Localizer["GameWrongCategory"]</label>
                    <InputText @bind-Value="gameData.QuestionWrongCategory" style="width:300px;" />
                    <div class="custom-tooltip ">
                        <i class="fa fa-info-circle"></i>
                        <div class="tooltip-content">
                            איזה טולטיפ חביב ונחמד
                        </div>
                    </div>
                </td>
                <td style="text-align:center;width:10%;">
                    <input type="submit" class="btn btn-primary" @onclick="EditGameData" value="@Localizer["Save"]" />

                </td>
            </tr>
        </table>
        <table>
            <tr>
                <td style="width:12%;">
                    <label>@Localizer["GameEndMessage"]</label>
                </td>
                <td style="width:30%;">
                    <InputText @bind-Value="gameData.GameEndMessage" style="width:300px;" />
                </td>
                <td style="text-align:center;">
                    @if (gameData.IsPublished == false)
                    {
                        <input type="submit" class="btn btn-success" @onclick="ShowModal" value="@Localizer["GamePublish"]" />
                    }
                    else
                    {
                        <input type="submit" class="btn btn-outline-success" @onclick="ShowModal" value="@Localizer["Unpublish"]" />
                    }
                </td>
                <td style="text-align:center;width:10%;">
                    <button class="btn btn-outline-secondary" @onclick="CancelEdit">@Localizer["Back"]</button>
                </td>
            </tr>
        </table>
    </EditForm>
    
    <br />
    <br />
    <table style="width:25%;">
        <tr>
            <th colspan="2">טבלת עזר</th>
        </tr>
        <tr>
            <td>
                <label>@Localizer["GameCode"]</label>
            </td>
            <td>
                <input type="text" @bind-value=gameCode disabled />
            </td>
        </tr>
        <tr>
            <td>
                <label>@Localizer["GameID"]</label>
            </td>
            <td>
                <input type="text" @bind-value=gameData.ID disabled />
            </td>
        </tr>
        <tr>
            <td>
                <label>@Localizer["GameAnswersCount"]</label>
            </td>
            <td>
                <input type="number" @bind-value="gameAnswersCount" disabled />
            </td>
        </tr>
        <tr>
            <td>
                <label>@Localizer["IsPublished"]</label>
            </td>
            <td>
                @if (gameData.IsPublished == false)
                {
                    <input type="checkbox" disabled />
                }
                else
                {
                    <input type="checkbox" checked="@gameData.IsPublished" disabled />
                }
            </td>
        </tr>
        <tr>
            <td>
                <label>@Localizer["CanPublish"]</label>
            </td>
            <td>
                @if (gameData.CanPublish == false)
                {
                    <input type="checkbox" disabled />
                }
                else
                {
                    <input type="checkbox" checked="@gameData.CanPublish" disabled />
                }
            </td>
        </tr>
    </table>

    <p>@pageMsg</p>
    <p>@msg</p>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [CascadingParameter]
    public int UserId { get; set; }

    UserWithGames user;

    [Parameter]
    public string gameCode { get; set; }

    GameDetails gameData;

    List<GameAnswers> newGameAnswers = new List<GameAnswers>();

    bool newIsPublished = false;
    bool newCanPublish = false;
    int gameAnswersCount = 0;
    string msg = "";
    string pageMsg = "";

    [Parameter]
    public List<Games> GamesList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            gameData = await Http.GetFromJsonAsync<GameDetails>($"api/game/" + UserId + "/getGame/" + gameCode);
            gameAnswersCount = gameData.Answers.Count();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            pageMsg = "Error getting game data";
        }
    }

    //edit game data save to database using  [HttpPut("updateGame/{updateGameCode}")] and textbox values on page
    async Task EditGameData()
    {
        //return new gameData with the form details
        GameDetails newGame = new GameDetails()
            {
                ID = gameData.ID,
                GameCode = gameData.GameCode,
                GameName = gameData.GameName,
                QuestionDescription = gameData.QuestionDescription,
                GameEndMessage = gameData.GameEndMessage,
                CanPublish = gameData.CanPublish,
                IsPublished = gameData.IsPublished,
                QuestionCorrectCategory = gameData.QuestionCorrectCategory,
                QuestionWrongCategory = gameData.QuestionWrongCategory,
            };

        await Http.PutAsJsonAsync($"api/game/" + UserId + "/updateGame/" + gameCode, newGame);
        Nav.NavigateTo("/Pagewithauth");
    }

    //cancel edit and return to page with auth
    void CancelEdit()
    {
        Nav.NavigateTo("/Pagewithauth");
    }

    async Task checkCanPublish()
    {
        newCanPublish = gameData.CanPublish;

        newCanPublish = await Http.GetFromJsonAsync<bool>($"api/game/" + UserId + "/canPublish/" + gameData.ID);
        if (newCanPublish == true)
        {
            newIsPublished = true;
        }
        else
        {
            newIsPublished = false;
        }
    }

    void formSubmit()
    {
        checkCanPublish();
    }

    void failedSubmit()
    {
        msg = "failed to sumbit!";
    }

    //edit publish status method to change IsPublished value on the server db
    async Task changePublish(GameDetails game)
    {
        PublishGame gameToSend = new PublishGame();
        gameToSend.ID = gameData.ID;
        gameToSend.IsPublished = !gameData.IsPublished;

        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/publishGame", gameToSend);
        if (userRes.IsSuccessStatusCode == true)
        {
            gameData.IsPublished = gameToSend.IsPublished;

            if (gameData.IsPublished == true)
            {
                msg = "Game published";
            }
            else
            {
                msg = "Game unpublished";
            }
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
                case "Game not created":
                    msg = "There was a problem creating the game";
                    break;
                case "Game code not created":
                    msg = "There was a problem generating the game code";
                    break;
                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user";
                    break;
                case "This game cannot be published":
                    msg = @Localizer["The game does not meet the conditions of publishing"];
                    break;
            }
        }
    }

    //show modal method to show modal with confirmation message
    async Task ShowModal()
    {
        var parameters = new ModalParameters()
            .Add(nameof(PopUpComponent.Message), "האם ברצונכם לשנות את סטאטוס הפרסום?"); // Pass parameter(s) to modal component
        var messageForm = Modal.Show<PopUpComponent>("פרסום משחק", parameters); // Show modal
        var result = await messageForm.Result; // Get result from modal
        if (result.Confirmed)
        {
            await changePublish(gameData);
        }
        else
        {
            Console.WriteLine("Not confirmed");
        }
        var currentUrl = Nav.Uri;
        // Navigate to the current URL to reload the page
        Nav.NavigateTo(currentUrl);
    }
}
