@inherits InputText

@if (!string.IsNullOrEmpty(alert) && alertIsSet)
{
    <span>
        <Tooltip Text="@alert">
            <i class="fa fa-info-circle">  </i>
        </Tooltip>
    </span>
}

<input @attributes="AdditionalAttributes" class="@CssClass @inputClass"
@bind="CurrentValueAsString" @bind:event="oninput" @onkeyup="countChars"  required />

@* <span>@CurrentValueAsString.Length/30</span> *@
<span>@(CurrentValueAsString?.Length ?? 0)/30</span>

@code {
    string inputClass = "";
    [Parameter] public string alert { get; set; }

    bool alertIsSet = false; // Indicates whether the alert has been set at least once

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!string.IsNullOrEmpty(alert))
        {
            alertIsSet = true; // Initial alert value is set
        }
    }
   

    void countChars()
    {
        int length = CurrentValueAsString.Length;
        // string minChars = AdditionalAttributes["minChars"].ToString();
        string minChars = AdditionalAttributes.ContainsKey("minChars") ? AdditionalAttributes["minChars"].ToString() : "2";

        int minCharsInt = Convert.ToInt32(minChars);

        if (length > minCharsInt && length <= 24)
        {
            inputClass = "good-input";
            alert = $"יש בין {minCharsInt} ל10 תווים";
        }
       
        else if (length > 24 && length <= 29)
        {
            inputClass = "warnning-input";
            alert = "יש יותר מ15 תווים";
        }
        else if (length >= 30)
        {
            inputClass = "danger-input";
            alert = "הגעת למקסימום התווים";
        }
        else
        {
            inputClass = "";
            alert = "אין מספיק תווים";
        }
    }
}