@inject IStringLocalizer<SharedResources> Localizer
@using TriangleProject.Shared.Models.Games

<table class="table">
    <thead>
        <tr>
            @foreach (var property in typeof(GameMainTable).GetProperties())
                {
                    <th>@Localizer[property.Name]</th>
                }

        </tr>
    </thead>
 <tbody>
        @foreach (var item in GamesList)
        {
            <tr>
    @foreach (var property in typeof(GameMainTable).GetProperties())
                {
                    <td>

                        @switch (property.Name)
                        {
                            case "GameDelete":
                                <button @onclick="() => DeleteGame(item) ">
                                    @Localizer[property.Name]
                                </button>
                                break;
                            case "GamePublish":
                                <input type="checkbox" checked="@property.GetValue(item)" />
                                break;
                            case "GameEdit":
                                <button @onclick="() => EditGame(item)">
                                    @Localizer[property.Name]
                                </button>
                                break;
                            case "GameCode":
                                @property.GetValue(item)
                                break;

                            case "GameName":
                                @property.GetValue(item)
                                break;
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<GameMainTable> GamesList { get; set; }




    [Parameter]
    public EventCallback<GameMainTable> OnDeleteClicked { get; set; }

    private async Task DeleteGame(GameMainTable game)
    {
        await OnDeleteClicked.InvokeAsync(game);
    }
    private async Task EditGame(GameMainTable game)
    {
        await OnDeleteClicked.InvokeAsync(game);
    }
}